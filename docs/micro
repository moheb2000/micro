#!/bin/bash


# micro is a static site builder that written with shell script and generally maked for linux operating systems
# LISENCE MIT 2020 Mohammad Ebrahimi
# this is a beta version for developing and should not use for important tasks
# github respiratory: https://github.com/moheb2000/micro



# Get title for website
while [[ -z "$title" ]]; do
	read -p "Please enter your site title -> " title
	if [[ -z "$title" ]]; then
		echo "Please enter your title"
	fi
done


# Get a directory for website building
read -p "Please enter build address(If you're not sure just click enter) -> " frontend
if [[ -z "$frontend" ]]; then
	frontend="frontend"
	mkdir "$frontend"
fi


# Create necessary directories
mkdir themes content core themes/default plugins myimages


# Create default articles in content directory
mkdir content/1 content/2
makeIndex () {
	cat <<- _TOKEN_
		topic='home'
		content='
		<h1>micro</h1>
		<h2>Welcome to micro</h2>
		<p>"Micro" is a simple static site generator that is written in shell programming language. It has a long way upon its face to become a good and complete site generator but I thank you because of your choice. I will be glad if you tell me my script problems and bugs and give me your suggestions about "micro". It is my first serious script in bash and I thank you again for your ideas that give to me.</p>
		<p>You can download my script from github. <a href="https://github.com/moheb2000/micro">Just click here</a></p>
		<p>And for reading docs you can <a href="docs.html">click here.</a></p>
		'
	_TOKEN_
}
makeIndex > content/1/index

makeDocs () {
	cat <<- _TOKEN_
		topic='docs'
		content='
		<h1>Documentation</h1>
		<h2>Installaton</h2>
		<p>For use of "micro" you should turn it executable. For that download "micro" from github and open bash on that directory. Then type this command in bash:</p>
		<code>sudo chmod 755 micro</code>
		<p>After that copy this file in /home/bin directory. If it does not exist create it. Then open bash and enter in a directory that you want to design and develop your site. use this command:</p>
		<code>cd my-site-directory</code>
		<p>Then write and run this command:</p>
		<code>micro</code>
		<p>In the first step, the script wants you to enter your site title. In the next step, you should enter your site-building directory. If you do not enter a directory it is create your site in frontend directory by default. Wish your site function and select a directory (this directory must exist).</p>
		<code>Please enter your site title -> <br />Please enter build address(If you are not sure just click enter) -> </code>
		<h3>Apache2</h3>
		<p>If you use apache2 web server for your site enter below directory for your building address:</p>
		<code>/var/www/html</code>
		<p>And if you use it locally on your system, your site will be available in localhost.</p>
		<h3>Github</h3>
		<p>If you want to publish your site in github it is enough to enter your site-building directory nothing. So your site will build in frontend directory. Add it to git and push this directory to your site respiratory in github.</p>
		<h2>Configuration</h2>
		<p>For any reason, if you want to change site title or building address, open variables file in core directory and modify title and frontend variables.</p>
		<h2>site pages and articles</h2>
		<p>Your site pages and articles place in content directory. For making a new page, create a directory with numeral name in content and add a file (for example, index) in it. The number of directory determines the topic page location in the navigation bar and the name of the file determines the page address in the site. (for example, if the name of the file is index the address is index.html) <span style="color: red;">Do not use space in file names.</span></p>
		<p>For content use HTML as markdown language. Your text must have no single quote.</p>
		<p>Save your image in myimages directory and use myimages/your-image-name in content markdown.</p>
		<h2>theme</h2>
		<p>Your theme folders and codes locate in themes directory. To use a theme copy its folder in themes directory and go to core/variables and change the value of theme variable to your theme directory name (like default). For creating a new theme for "micro" follow these steps:</p>
		<ul>
		<li>Create a folder for your theme in themes directory</li>
		<li>Make a file called theme in it</li>
		<li>Write your code in this file</li>
		<li>Add other theme files and directories to your folder</li>
		<li>Change the value of theme variable in core/variables</li>
		</ul>
		<h2>plugin</h2>
		<p>"Micro" plugins write in bash script and import to builder file. To add a plugin, copy your plugin file in plugins directory</p>
		<h2>Building site</h2>
		<p>The last step is building your site in your wishing directory (by default, frontend directory). To do that open command line in your site directory and run builder shell script:</p>
		<code>./builder</code>
		<p>This script removes all files in building directory and adds new site files in it.</p>
		<P>Excellent. Your site is ready. Every time you change your site contents you must run builder script to build your site.</p>
'
	_TOKEN_
}
makeDocs > content/2/docs


# This function creates theme file for default theme
makeTheme () {
	cat <<- _TOKEN_
	makeContent () {
	cat <<- _ECE_
	<!DOCTYPE html>
	<html>
		<head>
			<title>\$title</title>
		</head>
		<body>
			<header>
				<h1>\$title</h1>
				<nav>
					<ul>
						\$(for j in content/*/*; do source \$j; echo "<li><a href="\$(basename \$j).html">\$topic</li></a>"; done)
					</ul>
				</nav>
			</header>
			<div>
				<h1>\$topic</h1>
				\$content
			</div>
			<footer>
			</footer>
		</body>
	</html>
	_ECE_
	}
	_TOKEN_
}

# Save makeTheme in themes/default
git clone https://github.com/moheb2000/default-micro-theme.git themes/default || (makeTheme > themes/default/theme)


# Create core contents

# Create variables file
makeVariables () {
	cat <<- _TOKEN_
		# Define variables for configuration
		title="$title" # This is your site title
		frontend="$frontend" # This is your building directory
		theme="default" # This is your theme name in themes directory
	_TOKEN_
}
makeVariables > core/variables

# Create themecontent
makeThemeContent () {
	cat <<- _TOKEN_
		# Copy your theme content except theme file in building directory
		for h in themes/"\$theme"/*; do
			if [[ -e "\$h" ]]; then
				if [[ "\$h" != "themes/\$theme/theme" ]]; then
					cp -r "\$h" "\$frontend"
				fi
			fi
		done
	_TOKEN_
}
makeThemeContent >  core/themecontent

# Create sitepages
makeSitePages () {
	cat <<- _TOKEN_
		# Make your site pages
		for i in content/*/*; do
			if [[ -e "\$i" ]]; then
				source "\$i"
				source themes/"\$theme"/theme
				makeContent > "\$frontend"/\$(basename "\$i").html
			fi
		done
	_TOKEN_
}
makeSitePages > core/sitepages

# Creates myimagescore file
makeMyImagesCore () {
	cat <<- _TOKEN_
		# Add myimages directory to building directory
		if [[ -e myimages ]]; then
			cp -r myimages "\$frontend"
		fi
	_TOKEN_
}
makeMyImagesCore > core/myimagescore

# Create pluginscore file
makePluginsCore () {
	cat <<- _TOKEN_
		# Add plugins in codes here
		for l in plugins/*; do
			if [[ -e "\$l" ]]; then
				source "\$l"
			fi
		done
	_TOKEN_
}
makePluginsCore > core/pluginscore

# Create deletefrontend file
makeDeleteFrontend () {
	cat <<- _TOKEN_
	rm -r "\$frontend"/*
	_TOKEN_
}
makeDeleteFrontend > core/deletefrontend


# Creates builder shell script
makeBuilder () {
	cat <<- _TOKEN_
	#!/bin/bash


	# Define variables for configuration
	source core/variables


	# Add plugins in codes here
	source core/pluginscore


	# Delete frontend content
	source core/deletefrontend


	# Copy your theme content except theme file in building directory
	source core/themecontent


	# Make your site pages
	source core/sitepages


	# Add myimages directory to building directory
	source core/myimagescore
	_TOKEN_
}

# Save builder and make it executable and run it for the first time
makeBuilder > builder && chmod 755 builder && ./builder
